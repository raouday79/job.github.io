{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/addjob/addjob.component.css","webpack:///./src/app/addjob/addjob.component.html","webpack:///./src/app/addjob/addjob.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/assignjob/assignjob.component.css","webpack:///./src/app/assignjob/assignjob.component.html","webpack:///./src/app/assignjob/assignjob.component.ts","webpack:///./src/app/assignjobtable/assignjobtable.component.css","webpack:///./src/app/assignjobtable/assignjobtable.component.html","webpack:///./src/app/assignjobtable/assignjobtable.component.ts","webpack:///./src/app/employeeassignjob/employeeassignjob.component.css","webpack:///./src/app/employeeassignjob/employeeassignjob.component.html","webpack:///./src/app/employeeassignjob/employeeassignjob.component.ts","webpack:///./src/app/employeejoblist/employeejoblist.component.css","webpack:///./src/app/employeejoblist/employeejoblist.component.html","webpack:///./src/app/employeejoblist/employeejoblist.component.ts","webpack:///./src/app/employeelist/employeelist.component.css","webpack:///./src/app/employeelist/employeelist.component.html","webpack:///./src/app/employeelist/employeelist.component.ts","webpack:///./src/app/hometest/hometest.component.css","webpack:///./src/app/hometest/hometest.component.html","webpack:///./src/app/hometest/hometest.component.ts","webpack:///./src/app/joblist/joblist.component.css","webpack:///./src/app/joblist/joblist.component.html","webpack:///./src/app/joblist/joblist.component.ts","webpack:///./src/app/jobstats/jobstats.component.css","webpack:///./src/app/jobstats/jobstats.component.html","webpack:///./src/app/jobstats/jobstats.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/myjobs/myjobs.component.css","webpack:///./src/app/myjobs/myjobs.component.html","webpack:///./src/app/myjobs/myjobs.component.ts","webpack:///./src/app/naviagtion/naviagtion.component.css","webpack:///./src/app/naviagtion/naviagtion.component.html","webpack:///./src/app/naviagtion/naviagtion.component.ts","webpack:///./src/app/not-found/not-found.component.css","webpack:///./src/app/not-found/not-found.component.html","webpack:///./src/app/not-found/not-found.component.ts","webpack:///./src/app/shared/restapi.service.ts","webpack:///./src/app/success/success.component.css","webpack:///./src/app/success/success.component.html","webpack:///./src/app/success/success.component.ts","webpack:///./src/app/table/table.component.css","webpack:///./src/app/table/table.component.html","webpack:///./src/app/table/table.component.ts","webpack:///./src/app/updatejob/updatejob.component.css","webpack:///./src/app/updatejob/updatejob.component.html","webpack:///./src/app/updatejob/updatejob.component.ts","webpack:///./src/app/workingjob/workingjob.component.css","webpack:///./src/app/workingjob/workingjob.component.html","webpack:///./src/app/workingjob/workingjob.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div style=\\\"padding: 10px\\\">\\n<h2 style=\\\"text-align: center;border: 5px,5px;\\\">{{title}}</h2>\\n<form  #f=\\\"ngForm\\\"  (ngSubmit)=\\\"postJob()\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleInputEmail1\\\">Job Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\"  name=\\\"job_name\\\" [(ngModel)]=\\\"job.jobName\\\" required=\\\"required\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Job name\\\">\\n  </div>\\n    \\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleFormControlTextarea1\\\">Description</label>\\n    <textarea class=\\\"form-control\\\" name=\\\"job_description\\\" [(ngModel)]=\\\"job.jobDescription\\\" required=\\\"required\\\" placeholder=\\\"Description....\\\" id=\\\"exampleFormControlTextarea1\\\" rows=\\\"3\\\"></textarea>\\n  </div>\\n\\n\\n  <button  type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { RestapiService } from '../shared/restapi.service';\nimport { Job } from './model/job';\nimport { JobModel } from './model/jobmodel';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-addjob',\n  templateUrl: './addjob.component.html',\n  styleUrls: ['./addjob.component.css']\n})\n\nexport class AddjobComponent implements OnInit {\n\n    title = 'Enter Job Detail';\n    job: JobModel = {\n     jobId: 0,\n     jobName : '',\n     jobDescription : '',\n     jobStatus: ''\n\n };\n  constructor(private api: RestapiService, private router: Router) { }\n\n  ngOnInit() {\n    \n\n  }\n\n  public postJob() {\n //     alert('aaaa');\n  //    alert(this.job.jobName);\n  //  alert(this.job.jobDescription);\nthis.api.addJob(this.job).subscribe(\nres => {\nthis.api.setMainMessage('Job Added');\nthis.api.setSubMessage('Your Job has been Added Successfully.');\n\nthis.job.jobName = '' ;\nthis.job.jobDescription = '';\nthis.router.navigateByUrl('request-message');\n\n},\nerr => {\n    this.api.setMainMessage('Failed');\nthis.api.setSubMessage('Your New Job record failed to add. Please try again');\nthis.router.navigateByUrl('request-message');\n\n}\n\n);\n\n  }\n\n\n}\n\n\n\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron text-center\\\" style=\\\"margin-bottom:0\\\">\\r\\n  <h1>Job Management</h1>\\r\\n  <p></p> \\r\\n</div>\\r\\n\\r\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark\\\">\\r\\n  <a class=\\\"navbar-brand\\\" [routerLink]=\\\"['']\\\" routerLinkActive=\\\"router-link-active\\\">Home</a>\\r\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapsibleNavbar\\\">\\r\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n  </button>\\r\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"collapsibleNavbar\\\">\\r\\n    <ul class=\\\"navbar-nav\\\">\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/addjob']\\\" routerLinkActive=\\\"router-link-active\\\" >ADD JOB</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/joblist']\\\" routerLinkActive=\\\"router-link-active\\\" >JOB LIST</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/employee-list']\\\" routerLinkActive=\\\"router-link-active\\\" >EMPLOYEE LIST</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/assign-job']\\\" routerLinkActive=\\\"router-link-active\\\" >ASSIGN JOB</a>\\r\\n      </li>\\r\\n      \\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/on-date-employee-job-detail']\\\" routerLinkActive=\\\"router-link-active\\\" >EMPLOYEE JOB DETAIL</a>\\r\\n      </li>\\r\\n      <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/my-jobs']\\\" routerLinkActive=\\\"router-link-active\\\" >EMPLOYEE JOBS</a>\\r\\n      </li> \\r\\n       <li class=\\\"nav-item\\\">\\r\\n        <a class=\\\"nav-link\\\" [routerLink]=\\\"['/job-report']\\\" routerLinkActive=\\\"router-link-active\\\" >JOB REPORT</a>\\r\\n      </li>\\r\\n           \\r\\n    </ul>\\r\\n  </div>  \\r\\n</nav>\\r\\n<router-outlet></router-outlet>\\r\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'JobManagement';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { NaviagtionComponent } from './naviagtion/naviagtion.component';\nimport { AddjobComponent } from './addjob/addjob.component';\nimport { JoblistComponent } from './joblist/joblist.component';\nimport { LoginComponent } from './login/login.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { Router, Routes, RouterModule} from '@angular/router';\nimport { UpdatejobComponent } from './updatejob/updatejob.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { EmployeelistComponent } from './employeelist/employeelist.component';\nimport { EmployeeassignjobComponent } from './employeeassignjob/employeeassignjob.component';\nimport { EmployeejoblistComponent } from './employeejoblist/employeejoblist.component';\nimport { WorkingjobComponent } from './workingjob/workingjob.component';\nimport { AssignjobComponent } from './assignjob/assignjob.component';\nimport { DatePipe } from '@angular/common';\nimport { TableComponent } from './table/table.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MatToolbarModule,\n  MatTableModule,\n} from '@angular/material';\nimport { SuccessComponent } from './success/success.component';\nimport { MyjobsComponent } from './myjobs/myjobs.component';\nimport { AssignjobtableComponent } from './assignjobtable/assignjobtable.component';\nimport { JobstatsComponent } from './jobstats/jobstats.component';\nimport { HometestComponent } from './hometest/hometest.component';\n\n\n\n\nconst appRoutes: Routes = [\n\n    {\n        path : 'joblist',\n        component: JoblistComponent\n    },\n    {\n        path : 'addjob',\n        component: AddjobComponent\n    },\n    {\n        path : '',\n        component: LoginComponent,\n        pathMatch: 'full'\n    },\n    {\n        path : 'edit-job',\n        component: UpdatejobComponent\n    },\n    {\n        path : 'employee-list',\n        component: EmployeelistComponent\n    },\n    {\n        path : 'employee-job-assign',\n        component: EmployeeassignjobComponent\n    },\n    {\n        path : 'employee-jobs',\n        component: EmployeejoblistComponent\n    },\n     {\n        path : 'add-job-record',\n        component: WorkingjobComponent\n    },\n     {\n        path : 'assign-job',\n        component: AssignjobComponent\n    },\n    {\n        path : 'on-date-employee-job-detail',\n        component: AssignjobtableComponent\n    },\n    {\n        path : 'request-message',\n        component: SuccessComponent\n    },\n     {\n        path : 'my-jobs',\n        component: MyjobsComponent\n    },\n    {\n        path : 'job-report',\n        component: JobstatsComponent\n    },\n     {\n        path : '**',\n        component: NotFoundComponent\n    }\n\n\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NaviagtionComponent,\n    AddjobComponent,\n    JoblistComponent,\n    LoginComponent,\n    NotFoundComponent,\n    UpdatejobComponent,\n    EmployeelistComponent,\n    EmployeeassignjobComponent,\n    EmployeejoblistComponent,\n    WorkingjobComponent,\n    AssignjobComponent,\n    TableComponent,\n    SuccessComponent,\n    MyjobsComponent,\n    AssignjobtableComponent,\n    JobstatsComponent,\n    HometestComponent\n  ],\n  imports: [\n    BrowserModule,\n     FormsModule,\n      BrowserAnimationsModule,\n     MatToolbarModule,\n    MatTableModule,\n    HttpClientModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [\n      DatePipe\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div style=\\\"padding: 10px\\\">\\n<div class=\\\"alert alert-danger\\\" *ngIf=\\\"msgStatus\\\" role=\\\"alert\\\">\\n  {{msgDisplay}}\\n</div>\\n<form #f=\\\"ngForm\\\"  (ngSubmit)=\\\"assignJob()\\\">\\n  <div style=\\\"width: 20%\\\" class=\\\"form-group\\\">\\n    <label for=\\\"exampleFormControlInput1\\\">Select Date</label>\\n    <input type=\\\"date\\\" (change)=\\\"dateChange($event)\\\" name=\\\"date\\\" [(ngModel)]=\\\"date\\\" class=\\\"form-control\\\" id=\\\"exampleFormControlInput1\\\" placeholder=\\\"name@example.com\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleFormControlSelect1\\\">Select Employee</label>\\n    <select class=\\\"form-control\\\" name=\\\"joblist\\\" [(ngModel)]=\\\"emp\\\" (ngModelChange)=\\\"onChangeObj($event)\\\"  id=\\\"exampleFormControlSelect1\\\">\\n      <option  *ngFor=\\\"let employee of employees\\\" [ngValue]=\\\"employee\\\">{{employee.empName}}</option>\\n    </select>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleFormControlSelect2\\\">Example multiple Jobs</label>\\n    <select name=\\\"jobList22\\\" [(ngModel)]=\\\"jobAdd\\\" (ngModelChange)=\\\"addJobList($event)\\\" multiple class=\\\"form-control\\\" id=\\\"exampleFormControlSelect2\\\">\\n      <option  *ngFor=\\\"let job of joblist\\\" [ngValue]=\\\"job\\\">{{job.jobName}}</option>\\n    </select>\\n  </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Assign</button>\\n</form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { RestapiService } from '../shared/restapi.service';\nimport { Employee } from '../addjob/model/employee';\nimport { JobModel } from '../addjob/model/jobmodel';\nimport { JobAssign } from '../addjob/model/jobassign';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-assignjob',\n  templateUrl: './assignjob.component.html',\n  styleUrls: ['./assignjob.component.css']\n})\nexport class AssignjobComponent implements OnInit {\nchooseDate = new Date();\nmsgStatus = false;\nmsgDisplay = '';\nemployees: Employee[];\n  emp: Employee;\ndate: string;\n   joblist: JobModel[] = [];\njob: JobModel;\njobAdd: JobModel[] ;\n\njobs: JobModel;\n jobAssign: JobAssign = {\n    start: '',\n    end: '',\n    jobAssignId: 0,\n    totalHours: 0,\n    jobList: this.jobAdd,\n    status: 'open',\n    empId: 0\n};\n  constructor(private datePipe: DatePipe, private api: RestapiService, private router: Router) {\n     // alert('cons');\n      this.date = this.datePipe.transform(this.chooseDate, 'yyyy-MM-dd');\n        this.getEmployee();\n    //    this.getJob();\n  }\n\n    onChangeObj(emp) {\n    console.log(emp);\n    this.emp = emp;\n//    alert(emp.empId);\n    this.getJob();\n    // ... do other stuff here ...\n  }\n\naddJobList(job) {\n\n    this.jobAdd.concat(job);\n  //  alert(this.jobAdd.length);\n}\n  getEmployee() {\n   this.api.allEmployee().subscribe(\n          res => {\n\n            this.employees = res;\n            this.emp = this.employees[0];\n          },\n          err => {\n\n            alert('Error in network  connection..');\n          }\n\n      );\n  }\n  getJob() {\nthis.api.employeeSpecificJob(this.emp.empId, this.date).subscribe(\n\n    res => {\n        this.joblist = res;\n        this.job = this.joblist[0];\n    },\n    err => {\n\n        alert('Cant make request');\n    }\n\n\n);\n  }\n\ndateChange(event)  {\nthis.getJob();\n}\n\n// this method will post the selected jobs to the particular employee....\n  assignJob() {\n\n      if (this.jobAdd.length === 0) {\nthis.msgStatus = true;\nthis.msgDisplay = 'Please Select Atleast One Job to Assign ' + this.emp.empName;\n\n\n      } else {\n\n    this.jobAssign.start = this.date;\n      this.jobAssign.end = this.date;\n      this.jobAssign.jobList = this.jobAdd;\n      this.jobAssign.empId = this.emp.empId;\n      this.jobAssign.status = 'open';\n       this.api.assignJob(this.jobAssign).subscribe(\n        res => {\n\n            // this.job();\n            this.api.setMainMessage('Job Assigned');\n            this.api.setSubMessage('Your Job has been assign Successfully.');\n            this.router.navigateByUrl('request-message');\n            // location.reload();\n        },\n        err => {\n            alert('can not assign job...plz try after some time....');\n\n        }\n\n    );\n\n\n    }\n  }\n\n\n  ngOnInit() {\n      // alert(this.chooseDate);\n      // alert(this.date);\n      console.log(this.chooseDate);\n      console.log(this.date);\n     //   alert('init');\n    //  this.getEmployee();\n  }\n\n}\n","module.exports = \"table {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #f5f5f5;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-symbol {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\"","module.exports = \"<div style=\\\"padding: 10px\\\">\\n<button style=\\\"width: 100%;padding: 20px;font-size:30px\\\" type=\\\"button\\\" class=\\\"btn btn-success\\\">JOB ASSIGN LIST ON : {{date}}</button>\\n<br>\\n<button style=\\\"width: 100%;padding: 20px;font-size:20px\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\">No. of Assign Employee : {{jobView.length}}</button>\\n<div class=\\\"form-group\\\" style=\\\"width: 20%\\\">\\n    <label for=\\\"exampleFormControlInput1\\\">Select Date</label>\\n    <input type=\\\"date\\\" (change)=\\\"dateChange($event)\\\" name=\\\"date\\\" [(ngModel)]=\\\"date\\\" class=\\\"form-control\\\" id=\\\"exampleFormControlInput1\\\" placeholder=\\\"name@example.com\\\">\\n  </div>\\n\\n<table mat-table\\n       [dataSource]=\\\"jobView\\\" multiTemplateDataRows\\n       class=\\\"mat-elevation-z8\\\">\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of columnsToDisplay; let i = index\\\">\\n    <th mat-header-cell *matHeaderCellDef> {{toDisplay[i]}} </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[toobj[i]][todata[i]]}} </td>\\n  </ng-container>\\n\\n\\n\\n\\n\\n\\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\\n  <ng-container matColumnDef=\\\"expandedDetail\\\">\\n    <td mat-cell *matCellDef=\\\"let element\\\" [attr.colspan]=\\\"columnsToDisplay.length\\\">\\n      <div class=\\\"example-element-detail\\\"\\n           [@detailExpand]=\\\"element == expandedElement ? 'expanded' : 'collapsed'\\\">\\n\\n\\n       <table class=\\\"table table-sm\\\">\\n        <thead>\\n        <tr>\\n        <th scope=\\\"col\\\">Job Name</th>\\n        <th scope=\\\"col\\\">Job Description</th>\\n        <th scope=\\\"col\\\">Work Status</th>\\n        </tr>\\n        </thead>\\n        <tbody>\\n        <tr *ngFor=\\\"let j of element.jobs\\\">\\n        <td scope=\\\"col\\\">{{j.jobName}}</td>\\n        <td scope=\\\"col\\\">{{j.jobDescription}}</td>\\n        <td scope=\\\"col\\\">{{j.jobStatus}}</td>\\n        </tr>\\n        </tbody>\\n        </table>\\n\\n        \\n      </div>\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"columnsToDisplay\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let element; columns: columnsToDisplay;\\\"\\n      class=\\\"example-element-row\\\"\\n      [class.example-expanded-row]=\\\"expandedElement === element\\\"\\n      (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\n  </tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\n</table>\\n</div>\\n\\n<!-- Copyright 2018 Google Inc. All Rights Reserved.\\n    Use of this source code is governed by an MIT-style license that\\n    can be found in the LICENSE file at http://angular.io/license -->\"","import { Component, OnInit } from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport { JobViewModel } from '../addjob/model/jobviewmodel';\nimport { RestapiService } from '../shared/restapi.service';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-assignjobtable',\n  templateUrl: './assignjobtable.component.html',\n  styleUrls: ['./assignjobtable.component.css'],\n   animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class AssignjobtableComponent implements OnInit {\n// dataSource = ELEMENT_DATA;\n date: string;\n jobView: JobViewModel[];\n chooseDate = new Date();\n   toDisplay = ['Employee Name', 'Contact No.', 'No. of Jobs'];\n   todata = ['empName', 'contact', 'length'];\n   toobj = ['employee', 'employee', 'jobs'];\n   columnsToDisplay = ['.employee.empName', 'contact', 'jobs.length'];\n  expandedElement: JobViewModel | null;\n  constructor(private datePipe: DatePipe, private api: RestapiService) {\n this.date = this.datePipe.transform(this.chooseDate, 'yyyy-MM-dd');\n      this.getData();\n\n  }\n\n   dateChange(event) {\n     // this.date = event;\n      alert(this.date);\n      this.getData();\n\n  }\n   getData() {\n       this.api.getJobByDate(this.date).subscribe(\n          res => {\nthis.jobView = res;\n          },\n          err => {\nalert('cant make network reqquest');\n          }\n      );\n   }\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>{{title}} : {{name}}</h2>\\n  <h2></h2>\\n  \\n  <table class=\\\"table table-hover\\\">\\n    <thead>\\n      <tr>\\n        <th>Job Id</th>\\n        <th>Job Name</th>\\n        <th>Job Description</th>\\n         <th>Start date</th>\\n         <th>End date</th>\\n        <th>Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let job of joblist\\\">\\n        <td>{{job.jobId}}</td>\\n        <td>{{job.jobName}}</td>\\n        <td>{{job.jobDescription}}</td>\\n        <td><input [(ngModel)]=\\\"start\\\" name=\\\"start_date\\\" type=\\\"date\\\"></td>\\n        <td><input  [(ngModel)]=\\\"end\\\" name=\\\"date_date\\\" type=\\\"date\\\"></td>\\n        \\n        <td><button type=\\\"button\\\" (click)=\\\"assignJob(job)\\\" class=\\\"btn btn-primary active\\\">Assign</button></td>\\n       \\n      </tr>\\n      \\n    </tbody>\\n  \\n  </table>\\n \\n</div>\\n \"","import { Component, OnInit } from '@angular/core';\nimport { Job } from '../addjob/model/job';\nimport { RestapiService } from '../shared/restapi.service';\nimport { Employee } from '../addjob/model/employee';\nimport { JobModel } from '../addjob/model/jobmodel';\nimport { JobAssign } from '../addjob/model/jobassign';\n\n@Component({\n  selector: 'app-employeeassignjob',\n  templateUrl: './employeeassignjob.component.html',\n  styleUrls: ['./employeeassignjob.component.css']\n})\nexport class EmployeeassignjobComponent implements OnInit {\n\n    title = 'Jobs To Assign';\n    name = '';\n   private  emp: Employee;\n\n   jobAssign: JobAssign;\n   date: '2017-01-10';\n\n   start: '';\n   end: '';\n    jobedit: JobModel;\n    joblist: JobModel[] = [];\n  constructor(  private api: RestapiService) {\n\n    this.emp = api.getEmployee();\n    this.name = this.emp.empName;\n    alert(this.emp.empName);\n    this.jobAssign.empId = this.emp.empId;\n  }\n\n  ngOnInit() {\n      this.getJob();\n  }\n  getJob() {\nthis.api.employeeSpecificJob(this.emp.empId, this.date).subscribe(\n\n    res => {\n        this.joblist = res;\n    },\n    err => {\n\n        alert('Cant make request');\n    }\n\n\n);\n  }\n\nassignJob(job: JobModel) {\n    this.jobAssign.start = this.start;\n    this.jobAssign.end = this.end;\n    this.jobAssign.totalHours = 0;\n    this.api.assignJob(this.jobAssign).subscribe(\n        res => {\n\n             this.getJob();\n            // location.reload();\n        },\n        err => {\n            alert('can not assign job...plz try after some time....');\n\n        }\n\n    );\n\n}\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>{{title}}:{{emp.empName}}</h2>\\n  <h2></h2>\\n  \\n  <table class=\\\"table table-hover\\\">\\n    <thead>\\n      <tr>\\n        <th>Assign Id</th>\\n        <th>Job Name</th>\\n        <th>Job Description</th>\\n         <th>Start date</th>\\n         <th>End date</th>\\n          <th>Total Work(hr)</th>\\n        <th>Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let empjob of employeejobmodel\\\">\\n        <td>{{empjob.assignDto.jobAssignId}}</td>\\n        <td>{{empjob.jobDto.jobName}}</td>\\n        <td>{{empjob.jobDto.jobDescription}}</td>\\n        <td>{{empjob.assignDto.start}}</td>\\n        <td>{{empjob.assignDto.end}}</td>\\n        <td>{{empjob.assignDto.totalHours}}</td>\\n       \\n        \\n        <td><button type=\\\"button\\\" (click)=\\\"workingDetail(empjob)\\\" class=\\\"btn btn-primary active\\\">Enter Work</button></td>\\n       \\n      </tr>\\n      \\n    </tbody>\\n  \\n  </table>\\n \\n</div>\\n \"","import { Component, OnInit } from '@angular/core';\nimport { RestapiService } from '../shared/restapi.service';\nimport { Employee } from '../addjob/model/employee';\nimport { EmployeeJobModel } from '../addjob/model/employeejobmodel';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-employeejoblist',\n  templateUrl: './employeejoblist.component.html',\n  styleUrls: ['./employeejoblist.component.css']\n})\nexport class EmployeejoblistComponent implements OnInit {\n\n    emp: Employee;\n\n    title: 'My Jobs';\n    employeejobmodel: EmployeeJobModel[] = [];\n  constructor(private api: RestapiService, private router: Router) {\n      this.emp = this.api.getEmployee();\n   }\n\n  ngOnInit() {\n      this.getEmployeejob();\n  }\n\n\n  workingDetail(empJob: EmployeeJobModel) {\n    //  this.api.setWorkingJob(empJob);\n\n    this.api.setAssignId(empJob.assignDto.jobAssignId);\n      this.router.navigateByUrl('add-job-record');\n\n  }\n  getEmployeejob() {\nthis.api.getAllEmployeeAssignJob(this.emp).subscribe(\n\n    res => {\nthis.employeejobmodel = res;\nalert(this.employeejobmodel.length);\n\n    },\n    err => {\n\n        alert('can not make employee specific job call');\n    }\n);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>{{title}}</h2>\\n  \\n  <table class=\\\"table table-hover\\\">\\n    <thead>\\n      <tr>\\n        <th>Emp Id</th>\\n        <th>Emp Name</th>\\n        <th>Emp Contact</th>\\n        <!--\\n        <th>No. of job Assign</th>\\n        <th>Assign Job</th>\\n        <th>View Jobs</th>\\n\\n        -->\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let emp of emplist\\\">\\n        <td>{{emp.empId}}</td>\\n        <td>{{emp.empName}}</td>\\n        <td>{{emp.contact}}</td>\\n        <!--\\n         <td>{{emp.noOfJobAssigned}}</td>\\n         \\n        <td><button type=\\\"button\\\" (click)=\\\"assignNewJob(emp)\\\" class=\\\"btn btn-primary active\\\">Assign Job</button></td>\\n       <td><button type=\\\"button\\\" (click)=\\\"viewJobs(emp)\\\" class=\\\"btn btn-primary active\\\">View jobs</button></td>\\n       -->\\n      </tr>\\n      \\n    </tbody>\\n  \\n  </table>\\n\\n</div>\\n \"","import { Component, OnInit } from '@angular/core';\nimport { RestapiService } from '../shared/restapi.service';\nimport { Employee } from '../addjob/model/employee';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-employeelist',\n  templateUrl: './employeelist.component.html',\n  styleUrls: ['./employeelist.component.css']\n})\nexport class EmployeelistComponent implements OnInit {\n\n    emplist: Employee[] = [];\n\n    title: 'All Employee';\n  constructor(private api: RestapiService, private route: Router) { }\n\n\n  assignNewJob(emp: Employee) {\n      this.api.setEmployee(emp);\n      this.route.navigateByUrl('employee-job-assign');\n  }\n\n  viewJobs(emp: Employee) {\n       this.api.setEmployee(emp);\n       this.route.navigateByUrl('employee-jobs');\n  }\n  ngOnInit() {\n      this.getAllEmployee();\n  }\n\n  getAllEmployee() {\nthis.api.allEmployee().subscribe(\n    res => {\n        this.emplist = res;\n    },\n    err => {\n        alert('Can.t make request');\n\n    }\n\n);\n\n  }\n}\n","module.exports = \"\"","module.exports = \"<form>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleInputEmail1\\\">Email address</label>\\n    <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Enter email\\\">\\n    <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">We'll never share your email with anyone else.</small>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleInputPassword1\\\">Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"exampleInputPassword1\\\" placeholder=\\\"Password\\\">\\n  </div>\\n  <div class=\\\"form-check\\\">\\n    <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" id=\\\"exampleCheck1\\\">\\n    <label class=\\\"form-check-label\\\" for=\\\"exampleCheck1\\\">Check me out</label>\\n  </div>\\n  <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hometest',\n  templateUrl: './hometest.component.html',\n  styleUrls: ['./hometest.component.css']\n})\nexport class HometestComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  \n\n\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <h2>{{title}}</h2>\\n  \\n  <table class=\\\"table table-hover\\\">\\n    <thead>\\n      <tr>\\n        <th>Job Id</th>\\n        <th>Job Name</th>\\n        <th>Job Description</th>\\n        <th>Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let job of joblist\\\">\\n        <td>{{job.jobId}}</td>\\n        <td>{{job.jobName}}</td>\\n        <td>{{job.jobDescription}}</td>\\n        <td><button type=\\\"button\\\" (click)=\\\"editJob(job)\\\" class=\\\"btn btn-primary active\\\">Edit</button></td>\\n       \\n      </tr>\\n      \\n    </tbody>\\n  \\n  </table>\\n    <ul class=\\\"pagination\\\">\\n  \\n \\n  <li class=\\\"page-item\\\"*ngFor=\\\"let p of pages; let i=index\\\">\\n      <a class=\\\"page-link\\\"  (click)=\\\"setPage(i,$event)\\\" >{{i+1}}</a>\\n    </li>\\n  \\n\\n  \\n</ul>\\n</div>\\n \"","import { Component, OnInit } from '@angular/core';\nimport { RestapiService } from '../shared/restapi.service';\nimport { Job } from '../addjob/model/job';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-joblist',\n  templateUrl: './joblist.component.html',\n  styleUrls: ['./joblist.component.css']\n})\nexport class JoblistComponent implements OnInit {\n\n    title = 'All Job';\n\n\n    jobedit: Job;\n    joblist: Job[] = [];\n    private page = 0 ;\n    currentpage: number;\n     pages: Array<number>;\n  constructor(private api: RestapiService, private route: Router) {\n  }\n\n  ngOnInit() {\n      this.getAll();\n  }\n\n  setPage(i, event: any) {\n      event.preventDefault();\n      this.page = i;\n      this.getAll();\n\n  }\n  public getAll() {\n    this.api.getAllJob(this.page).subscribe(\n\n        res => {\n            this.joblist  = res['content'];\n            this.pages = new Array(res['totalPages']);\n          //  alert('from the resoftotalPages' + res['totalPages']);\n           // alert('store of pages array ' + this.pages.length);\n            this.currentpage = res['pageable']['pageNumber'];\n           // alert('currentpages   ' + this.currentpage);\n            console.log('HI');\n        },\n        err => {\n             alert('Can\\'t make request');\n        }\n\n\n\n    );\n  }\n\n  editJob(j: Job) {\nthis.api.setJob(j);\nthis.route.navigateByUrl('edit-job');\n\n  }\n\n}\n","module.exports = \"table {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\ntr.example-detail-row {\\r\\n  height: 0;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):hover {\\r\\n  background: #f5f5f5;\\r\\n}\\r\\n\\r\\ntr.example-element-row:not(.example-expanded-row):active {\\r\\n  background: #efefef;\\r\\n}\\r\\n\\r\\n.example-element-row td {\\r\\n  border-bottom-width: 0;\\r\\n}\\r\\n\\r\\n.example-element-detail {\\r\\n  overflow: hidden;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.example-element-diagram {\\r\\n  min-width: 80px;\\r\\n  border: 2px solid black;\\r\\n  padding: 8px;\\r\\n  font-weight: lighter;\\r\\n  margin: 8px 0;\\r\\n  height: 104px;\\r\\n}\\r\\n\\r\\n.example-element-symbol {\\r\\n  font-weight: bold;\\r\\n  font-size: 40px;\\r\\n  line-height: normal;\\r\\n}\\r\\n\\r\\n.example-element-description {\\r\\n  padding: 16px;\\r\\n}\\r\\n\\r\\n.example-element-description-attribution {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\"","module.exports = \"<div style=\\\"padding: 10px\\\">\\n<button style=\\\"width: 100%;padding: 20px;font-size:30px\\\" type=\\\"button\\\" class=\\\"btn btn-success\\\">Report From {{date1}} to {{date2}}</button>\\n<div class=\\\"form-group\\\" style=\\\"width: 20%\\\">\\n    <label for=\\\"exampleFormControlInput1\\\">From Date </label>\\n    <input type=\\\"date\\\"  name=\\\"date\\\" [(ngModel)]=\\\"date1\\\" class=\\\"form-control\\\" id=\\\"exampleFormControlInput1\\\" placeholder=\\\"name@example.com\\\">\\n  </div>\\n\\n <div class=\\\"form-group\\\" style=\\\"width: 20%\\\">\\n    <label for=\\\"exampleFormControlInput1\\\">To Date</label>\\n    <input type=\\\"date\\\"  name=\\\"date\\\" [(ngModel)]=\\\"date2\\\" class=\\\"form-control\\\" id=\\\"exampleFormControlInput1\\\" placeholder=\\\"name@example.com\\\">\\n  </div> \\n\\n  <button style=\\\"padding: 10px\\\" (click)=\\\"getReport($event)\\\" type=\\\"button\\\" class=\\\"btn btn-primary btn-lg\\\">Get Report</button>\\n\\n<table mat-table\\n       [dataSource]=\\\"jobStats\\\" multiTemplateDataRows\\n       class=\\\"mat-elevation-z8\\\">\\n  <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of columnsToDisplay; let i = index\\\">\\n    <th mat-header-cell *matHeaderCellDef> {{toDisplay[i]}} </th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element[toobj[i]]}} </td>\\n  </ng-container>\\n\\n\\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\\n  <ng-container matColumnDef=\\\"expandedDetail\\\">\\n    <td mat-cell *matCellDef=\\\"let element\\\" [attr.colspan]=\\\"columnsToDisplay.length\\\">\\n      <div class=\\\"example-element-detail\\\"\\n           [@detailExpand]=\\\"element == expandedElement ? 'expanded' : 'collapsed'\\\">\\n\\n\\n       <table class=\\\"table table-sm\\\">\\n        <thead>\\n        <tr>\\n        <th scope=\\\"col\\\">Job Name</th>\\n        <th scope=\\\"col\\\">Job Description</th>\\n        <th scope=\\\"col\\\">Assign Date</th>\\n        <th scope=\\\"col\\\">Work Status</th>\\n        <th scope=\\\"col\\\">Hour Spent</th>\\n        </tr>\\n        </thead>\\n        <tbody>\\n        <tr *ngFor=\\\"let j of element.jobs\\\">\\n        <td scope=\\\"col\\\">{{j.jobName}}</td>\\n        <td scope=\\\"col\\\">{{j.jobDescription}}</td>\\n        <td scope=\\\"col\\\">{{j.assignDate}}</td>\\n        <td scope=\\\"col\\\">{{j.jobStatus}}</td>\\n        <td scope=\\\"col\\\">{{j.hourSpent}}</td>\\n        </tr>\\n        </tbody>\\n        </table>\\n\\n        \\n      </div>\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\\"columnsToDisplay\\\"></tr>\\n  <tr mat-row *matRowDef=\\\"let element; columns: columnsToDisplay;\\\"\\n      class=\\\"example-element-row\\\"\\n      [class.example-expanded-row]=\\\"expandedElement === element\\\"\\n      (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\n  </tr>\\n  <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\n</table>\\n</div>\\n\\n<!-- Copyright 2018 Google Inc. All Rights Reserved.\\n    Use of this source code is governed by an MIT-style license that\\n    can be found in the LICENSE file at http://angular.io/license -->\"","import { Component, OnInit } from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport { RestapiService } from '../shared/restapi.service';\nimport { DatePipe } from '@angular/common';\nimport { EmpStatsModel } from '../addjob/model/empstatmodel';\n\n@Component({\n  selector: 'app-jobstats',\n  templateUrl: './jobstats.component.html',\n  styleUrls: ['./jobstats.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\nexport class JobstatsComponent implements OnInit {\n\n\n    jobStats: EmpStatsModel[];\n     chooseDate = new Date();\n     date1: string;\n     date2: string;\n\n    toDisplay = ['Employee Name', 'Contact No.', 'Total Jobs', 'Total Work(hour)'];\n   todata = ['empName', 'contact', 'length'];\n   toobj = ['empName', 'empContact', 'noOfJobs', 'totaHourWork'];\n   columnsToDisplay = ['.employee.empName', 'contact', 'jobs.length', 'jobs.tss'];\n   expandedElement: EmpStatsModel | null;\n  constructor(private datePipe: DatePipe, private api: RestapiService) {\n    this.date1 = this.datePipe.transform(this.chooseDate, 'yyyy-MM-dd');\n    this.date2 = this.datePipe.transform(this.chooseDate, 'yyyy-MM-dd');\n    this.getDate();\n\n  }\n\n  getReport(data: string) {\n\n    this.getDate();\n  }\n\n  getDate() {\n      this.api.getJobStats(this.date1, this.date2).subscribe(\n\n        res => {\nthis.jobStats = res;\n        },\n        err => {\n\nalert('can not make network');\n        }\n\n      );\n  }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<form>\\n\\n\\n    \\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleInputEmail1\\\">Select Authorization</label>\\n    <select class=\\\"form-control\\\">\\n  <option>Default select</option>\\n</select>\\n  </div>\\n\\n\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleInputEmail1\\\">Email address</label>\\n    <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Enter email\\\">\\n    <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">We'll never share your email with anyone else.</small>\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleInputPassword1\\\">Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"exampleInputPassword1\\\" placeholder=\\\"Password\\\">\\n  </div>\\n  <div class=\\\"form-check\\\">\\n    <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" id=\\\"exampleCheck1\\\">\\n    <label class=\\\"form-check-label\\\" for=\\\"exampleCheck1\\\">Check me out</label>\\n  </div>\\n  <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div style=\\\"padding: 10px\\\">\\r\\n\\r\\n<div style=\\\"width: 20%\\\" class=\\\"form-group\\\">\\r\\n    <label for=\\\"exampleFormControlInput1\\\">Select Date</label>\\r\\n    <input type=\\\"date\\\" (ngModelChange)=\\\"getDate()\\\" name=\\\"date\\\" [(ngModel)]=\\\"date\\\" class=\\\"form-control\\\" id=\\\"exampleFormControlInput1\\\" placeholder=\\\"name@example.com\\\">\\r\\n  </div>\\r\\n\\r\\n <div class=\\\"form-group\\\">\\r\\n    <label for=\\\"exampleFormControlSelect1\\\">Select Employee</label>\\r\\n    <select class=\\\"form-control\\\" name=\\\"joblist\\\"  [(ngModel)]=\\\"emp\\\" (ngModelChange)=\\\"onChangeObj($event)\\\"  id=\\\"exampleFormControlSelect1\\\">\\r\\n      <option  *ngFor=\\\"let employee of employees\\\" [ngValue]=\\\"employee\\\">{{employee.empName}}</option>\\r\\n    </select>\\r\\n  </div>\\r\\n\\r\\n  <table class=\\\"table table-hover\\\">\\r\\n    <thead>\\r\\n      <tr>\\r\\n        <th>Assign Id</th>\\r\\n        <th>Job Name</th>\\r\\n        <th>Job Description</th>\\r\\n        <th>Assign Status</th>\\r\\n        <th>Total (Hour)</th>\\r\\n        <th>Date</th>\\r\\n        <th>Work Hour</th>\\r\\n        <th>Choose Status</th>\\r\\n         <th>Action</th>\\r\\n      </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n      <tr *ngFor=\\\"let j of employeeJob\\\">\\r\\n        <td>{{j.assignDto.jobAssignId}}</td>\\r\\n        <td>{{j.jobDto.jobName}}</td>\\r\\n        <td>{{j.jobDto.jobDescription}}</td>\\r\\n        <td>{{j.assignDto.status}}</td>\\r\\n        <td>{{j.assignDto.totalHours}}</td>\\r\\n        <td><input class=\\\"form-control\\\" name=\\\"date22\\\"  [(ngModel)]=\\\"j.workDate\\\" required=\\\"required\\\" type=\\\"date\\\"></td>\\r\\n        <td><input type=\\\"number\\\" placeholder=\\\"Enter work hour..\\\" name=\\\"hours\\\" [(ngModel)]=\\\"j.workhour\\\"></td>\\r\\n        \\r\\n        <td>\\r\\n    <select  name=\\\"test\\\" [(ngModel)]=\\\"j.assignDto.status\\\" class=\\\"form-control form-control-sm\\\">\\r\\n        <option value=\\\"pending\\\">Pending</option>\\r\\n         <option value=\\\"close\\\">Close</option>\\r\\n    </select>\\r\\n        \\r\\n        </td>\\r\\n         <td><button type=\\\"button\\\" (click)=\\\"enterWork(j)\\\" class=\\\"btn btn-primary active\\\">Submit</button></td>\\r\\n       \\r\\n      </tr>\\r\\n      \\r\\n    </tbody>\\r\\n  \\r\\n  </table>\\r\\n\\r\\n  </div>\"","import { Component, OnInit } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { RestapiService } from '../shared/restapi.service';\nimport { Employee } from '../addjob/model/employee';\nimport { EmployeeJobModel } from '../addjob/model/employeejobmodel';\nimport { JobRecord } from '../addjob/model/jobrecord';\n\n@Component({\n  selector: 'app-myjobs',\n  templateUrl: './myjobs.component.html',\n  styleUrls: ['./myjobs.component.css']\n})\nexport class MyjobsComponent implements OnInit {\n\n    date: string;\n    chooseDate = new Date();\n    employees: Employee[];\n    employeeJob: EmployeeJobModel[];\n  emp: Employee;\n   jobrecord: JobRecord = {\n        date: '',\n        hourSpent: 0,\n        assignId: 0,\n        workId: 0,\n        jobStatus : 'pending'\n    };\n  constructor(private datePipe: DatePipe, private api: RestapiService) {\n        this.date = this.datePipe.transform(this.chooseDate, 'yyyy-MM-dd');\n        this.getEmployee();\n   }\n\n    onChangeObj(emp) {\n    console.log(emp);\n    this.emp = emp;\n    alert(emp.empId);\n    this.getMyJobs();\n    // ... do other stuff here ...\n  }\n\n  getDate() {\nthis.getMyJobs();\n  }\n  enterWork(emp: EmployeeJobModel) {\n      this.jobrecord.jobStatus = emp.assignDto.status;\n      this.jobrecord.assignId = emp.assignDto.jobAssignId;\n      this.jobrecord.date = emp.workDate;\n      this.jobrecord.hourSpent = emp.workhour;\n\n      this.api.addWorkingHour2(this.jobrecord).subscribe(\n        res => {\n            this.jobrecord = res;\n            this.getMyJobs();\n\n        },\n        err => {\n\n            alert('can add working detail....plz try again');\n        }\n    );\n\n\n  }\n    getMyJobs() {\n        this.api.getAllEmployeeAssignJob2(this.emp, this.date).subscribe(\n            res => {\nthis.employeeJob = res;\n            },\n            err => {\n\n                alert('cant make network call');\n            }\n        );\n    }\n\n    getEmployee() {\n   this.api.allEmployee().subscribe(\n          res => {\n\n            this.employees = res;\n            this.emp = this.employees[0];\n          },\n          err => {\n\n            alert('Error in network  connection..');\n          }\n\n      );\n  }\n\n  ngOnInit() {\n  }\n\n}\n\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron text-center\\\" style=\\\"margin-bottom:0\\\">\\n  <h1>My First Bootstrap 4 Page</h1>\\n  <p>Resize this responsive page to see the effect!</p> \\n</div>\\n\\n<nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Navbar</a>\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapsibleNavbar\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"collapsibleNavbar\\\">\\n    <ul class=\\\"navbar-nav\\\">\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"#\\\">Link</a>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"#\\\">Link</a>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\"#\\\">Link</a>\\n      </li>    \\n    </ul>\\n  </div>  \\n</nav>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-naviagtion',\n  templateUrl: './naviagtion.component.html',\n  styleUrls: ['./naviagtion.component.css']\n})\nexport class NaviagtionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h2>404 Page Not Found</h2>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Job } from '../addjob/model/job';\nimport { Employee } from '../addjob/model/employee';\nimport { JobModel } from '../addjob/model/jobmodel';\nimport { JobAssign } from '../addjob/model/jobassign';\nimport { EmployeeJobModel } from '../addjob/model/employeejobmodel';\nimport { WorkingModel } from '../addjob/model/workingmodel';\nimport { JobRecord } from '../addjob/model/jobrecord';\nimport { JobViewModel } from '../addjob/model/jobviewmodel';\nimport { EmpStatsModel } from '../addjob/model/empstatmodel';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestapiService {\nprivate  BASE_URL = 'http://localhost:8080/api';\nprivate  listjoburl = this.BASE_URL + '/pg-jobs';\nprivate updateurl = this.BASE_URL + '/update-job';\nprivate addjoburl = this.BASE_URL + '/jobsave';\n\nprivate allemployeeurl = this.BASE_URL + '/all-employee';\nprivate employeespecificjoburl = this.BASE_URL + '/employee-job-assign';\n\nprivate assignempjoburl = this.BASE_URL + '/assign-new-job';\n\nprivate employeeassignjoburl = this.BASE_URL + '/get-assign-job/';\nprivate employeeassignjoburl2 = this.BASE_URL + '/get-assign-jobs/';\n\nprivate addWorkingJobUrl = this.BASE_URL + '/add-working-hour';\nprivate addWorkingJobUrl2 = this.BASE_URL + '/add-job-hour';\n\nprivate jobsBydate = this.BASE_URL + '/jobs-on-dated';\n\nprivate getStatsUrl = this.BASE_URL + '/get-job-stats';\nprivate job: Job;\nprivate emp: Employee;\n\nprivate workJob: EmployeeJobModel;\n\nprivate empId: number;\nprivate assignId: number;\n\n\nprivate mainMessage: string;\nprivate subMessage: string;\n  constructor(private http: HttpClient) { }\n\n\n// request for get work stats\n getJobStats(start: string, end: string): Observable<EmpStatsModel[]> {\nreturn this.http.get<EmpStatsModel[]>(this.getStatsUrl + '?start=' + start + '&end=' + end);\n }\n\n\n  // Get jobs of Employee by Date\n\n  getJobByDate(date: string): Observable<JobViewModel[]> {\nreturn this.http.get<JobViewModel[]>(this.jobsBydate + '?date=' + date);\n  }\n\n  // This will post the job Working\n  addWorkingHour(workingJob: WorkingModel): Observable<WorkingModel> {\n      return this.http.post<WorkingModel>(this.addWorkingJobUrl, workingJob);\n  }\n\n   addWorkingHour2(job: JobRecord): Observable<JobRecord> {\n      return this.http.post<JobRecord>(this.addWorkingJobUrl2, job);\n  }\n  getAllEmployeeAssignJob(emp: Employee): Observable<EmployeeJobModel[]> {\n\n    return this.http.get<EmployeeJobModel[]>(this.employeeassignjoburl + emp.empId);\n  }\n\n  // This request will return the employee jobs open at date by empid\n   getAllEmployeeAssignJob2(emp: Employee, date: string): Observable<EmployeeJobModel[]> {\n\n    return this.http.get<EmployeeJobModel[]>(this.employeeassignjoburl2 + emp.empId + '/' + date);\n  }\ngetAllJob(page: number): Observable<Job[]> {\n\n   return this.http.get<Job[]>(this.listjoburl + '?pg=' + page);\n\n}\n\n// This will assign the multiple jobs to the employee at a time....\nassignJob(jobassign: JobAssign) {\n\nreturn this.http.post<JobAssign>(this.assignempjoburl, jobassign);\n}\n\n\nemployeeSpecificJob( empId: number, date: string) {\n\n    return this.http.get<JobModel[]>(this.employeespecificjoburl + '?empId=' + empId + '&date=' + date);\n}\n\n\nupdateJob(job: JobModel): Observable<any> {\n\n   return this.http.put( this.updateurl, job);\n}\n\nallEmployee(): Observable<Employee[]> {\n\n    return this.http.get<Employee[]>(this.allemployeeurl);\n}\n\naddJob(job: JobModel): Observable<any> {\n\n   return this.http.post( this.addjoburl, job);\n}\nsetJob(j: Job) {\n    this.job = j;\n\n}\n\ngetJob() {\n    return this.job;\n}\n\nsetEmployee(emp: Employee) {\n\n    this.emp = emp;\n}\n\ngetEmployee() {\n    return this.emp;\n}\n\nsetEmpId(empId: number) {\nthis.empId = empId;\n}\n\ngetEmpId() {\n    return this.empId;\n}\n\nsetWorkingJob(workJob: EmployeeJobModel) {\n\n    this.workJob = workJob;\n\n}\n\ngetWorkingJob() {\n    return this.workJob;\n}\n\nsetAssignId(assignId: number)  {\nthis.assignId = assignId;\n}\n\ngetAssignId() {\n    return this.assignId;\n}\nsetMainMessage(msg:  string) {\n    this.mainMessage = msg;\n}\ngetMainMessage() {\n    return this.mainMessage;\n}\n\nsetSubMessage(sub: string) {\n    this.subMessage = sub;\n}\n\ngetSubMessage() {\n    return this.subMessage;\n}\n\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron text-xs-center\\\">\\n  <h1 class=\\\"display-3\\\" >{{mainMessage}}</h1>\\n  <p class=\\\"lead\\\"><strong>{{subMessage}}</strong></p>\\n  <hr>\\n  <p>\\n    Having trouble? <a href=\\\"\\\">Contact us</a>\\n  </p>\\n  <p class=\\\"lead\\\">\\n    <a class=\\\"btn btn-primary btn-sm\\\" [routerLink]=\\\"['/addjob']\\\" role=\\\"button\\\">Add Job</a>\\n  </p>\\n   <p class=\\\"lead\\\">\\n    <a class=\\\"btn btn-primary btn-sm\\\" [routerLink]=\\\"['/joblist']\\\" role=\\\"button\\\">Job List</a>\\n  </p>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { RestapiService } from '../shared/restapi.service';\n\n@Component({\n  selector: 'app-success',\n  templateUrl: './success.component.html',\n  styleUrls: ['./success.component.css']\n})\nexport class SuccessComponent implements OnInit {\nmainMessage: string;\nsubMessage: string;\n\n\n\n\n  constructor(private api: RestapiService) {\n      this.mainMessage = this.api.getMainMessage();\n      this.subMessage = this.api.getSubMessage();\n   }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".example-container {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  max-height: 500px;\\r\\n  min-width: 300px;\\r\\n}\\r\\n\\r\\n.mat-table {\\r\\n  overflow: auto;\\r\\n  max-height: 500px;\\r\\n}\\r\\n\\r\\n.element-row {\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.element-row:not(.expanded) {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.element-row:not(.expanded):hover {\\r\\n  background: #f5f5f5;\\r\\n}\\r\\n\\r\\n.element-row.expanded {\\r\\n  border-bottom-color: transparent;\\r\\n}\"","module.exports = \"<button style=\\\"width: 100%;padding: 20px\\\" type=\\\"button\\\" class=\\\"btn btn-info\\\">Job Assign</button>\\n<div class=\\\"form-group\\\">\\n    <label for=\\\"exampleFormControlInput1\\\">Select Date</label>\\n    <input type=\\\"date\\\" (change)=\\\"dateChange($event)\\\" name=\\\"date\\\" [(ngModel)]=\\\"date\\\" class=\\\"form-control\\\" id=\\\"exampleFormControlInput1\\\" placeholder=\\\"name@example.com\\\">\\n  </div>\\n\\n\\n<div class=\\\"example-container mat-elevation-z8\\\">\\n  <mat-table #table [dataSource]=\\\"jobView\\\">\\n\\n    <!--- Note that these columns can be defined in any order.\\n          The actual rendered columns are set as a property on the row definition\\\" -->\\n\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"Employee Name\\\">\\n      <mat-header-cell *matHeaderCellDef> Employee Name </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.employee.empName}} </mat-cell>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"Contact No.\\\">\\n      <mat-header-cell *matHeaderCellDef> Contact No. </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.employee.contact}} </mat-cell>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"No. of Jobs\\\">\\n      <mat-header-cell *matHeaderCellDef> No. of Jobs </mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.jobs.length}} </mat-cell>\\n    </ng-container>\\n\\n    <!-- Expanded Content Column - The detail row is made up of this one column -->\\n    <ng-container matColumnDef=\\\"expandedDetail\\\">\\n      <mat-cell *matCellDef=\\\"let detail\\\"> \\n\\n\\n<table class=\\\"table table-sm\\\">\\n  <thead>\\n    <tr>\\n      <th scope=\\\"col\\\">Job Name</th>\\n      <th scope=\\\"col\\\">Job Description</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n      <tr>\\n      <td scope=\\\"col\\\">Job Name</td>\\n      <td scope=\\\"col\\\">Job Description</td>\\n    </tr>\\n     </tbody>\\n</table>\\n\\n       \\n     \\n</mat-cell>\\n</ng-container>\\n\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"\\n            matRipple \\n            class=\\\"element-row\\\" \\n            [class.expanded]=\\\"expandedElement == row\\\"\\n            (click)=\\\"expandedElement = row\\\"></mat-row>\\n    <mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']; when: isExpansionDetailRow\\\"\\n            [@detailExpand]=\\\"row.element == expandedElement ? 'expanded' : 'collapsed'\\\"\\n            style=\\\"overflow: hidden\\\"> \\n    </mat-row>\\n  </mat-table>\\n</div>\\n\\n\\n<!-- Copyright 2017 Google Inc. All Rights Reserved.\\n    Use of this source code is governed by an MIT-style license that\\n    can be found in the LICENSE file at http://angular.io/license -->\"","import { Component, OnInit } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Observable, of } from 'rxjs';\nimport { DataSource } from '@angular/cdk/table';\nimport { DatePipe } from '@angular/common';\nimport { JobViewModel } from '../addjob/model/jobviewmodel';\nimport { RestapiService } from '../shared/restapi.service';\nimport { JobModel } from '../addjob/model/jobmodel';\nimport { Employee } from '../addjob/model/employee';\n\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css'],\n   animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),\n      state('expanded', style({ height: '*', visibility: 'visible' })),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\n\n\nexport class TableComponent extends DataSource<any>   implements OnInit {\ndisplayedColumns = ['Employee Name', 'Contact No.', 'No. of Jobs'];\n expandedElement: any;\n date: string;\n jobView: JobViewModel[];\n\n number = new Array(5);\n chooseDate = new Date();\n  isExpansionDetailRow = (i: number, row: Object) => row.hasOwnProperty('detailRow');\n  constructor(private datePipe: DatePipe, private api: RestapiService) {\n      super();\n      this.date = this.datePipe.transform(this.chooseDate, 'yyyy-MM-dd');\n      this.getData();\n  }\n\n\n  dateChange(event) {\n     // this.date = event;\n      alert(this.date);\n      this.getData();\n\n  }\n   getData() {\n       this.api.getJobByDate(this.date).subscribe(\n          res => {\nthis.jobView = res;\n          },\n          err => {\nalert('cant make network reqquest');\n          }\n      );\n   }\n\n\n  connect(): Observable<JobModel[]> {\n    const rows = [];\n    this.jobView.forEach(element => rows.push(element.jobs, { detailRow: true, element }));\n    console.log(rows);\n    return of(rows);\n  }\n\n  disconnect() { }\n\n  ngOnInit() {\n  }\n\n}\nexport interface Element {\n  name: string;\n  position: number;\n  weight: number;\n  symbol: string;\n}\nconst data: Element[] = [\n  { position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H',  },\n  { position: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\n  { position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\n  { position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\n  { position: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\n  { position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\n  { position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\n  { position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\n  { position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\n  { position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\n  { position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na' },\n  { position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg' },\n  { position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al' },\n  { position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si' },\n  { position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P' },\n  { position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S' },\n  { position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl' },\n  { position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar' },\n  { position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K' },\n  { position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca' },\n];\n\n\n\n","module.exports = \"\"","module.exports = \"<div style=\\\"padding: 10px\\\">\\n<h2 style=\\\"text-align: center;border: 5px,5px;\\\">{{title}}</h2>\\n<h4 style=\\\"text-align: center;color: red\\\" *ngIf=\\\"status\\\">{{message}}</h4>\\n<form #f=\\\"ngForm\\\"  (ngSubmit)=\\\"updateJob()\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleInputEmail1\\\">Job Name</label>\\n    <input type=\\\"text\\\"name=\\\"jobname\\\" [(ngModel)]=\\\"jobModel.jobName\\\" required=\\\"required\\\" class=\\\"form-control\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" >\\n    \\n</div>\\n    \\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleFormControlTextarea1\\\">Description</label>\\n    <textarea class=\\\"form-control\\\" name=\\\"jobdescription\\\" required=\\\"required\\\" [(ngModel)]=\\\"jobModel.jobDescription\\\" id=\\\"exampleFormControlTextarea1\\\" rows=\\\"3\\\"></textarea>\\n  </div>\\n\\n\\n  <button type=\\\"Update\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Job } from '../addjob/model/job';\nimport { RestapiService } from '../shared/restapi.service';\nimport { JobModel } from '../addjob/model/jobmodel';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-updatejob',\n  templateUrl: './updatejob.component.html',\n  styleUrls: ['./updatejob.component.css']\n})\nexport class UpdatejobComponent implements OnInit {\n\n\n     title = 'EDIT JOB DETAIL';\n    message = '';\n    status = false;\n  job: Job ;\n  jobModel: JobModel = {\n      jobId : 0 ,\n      jobName : '',\n      jobDescription : '',\n      jobStatus : ''\n};\n  constructor(private api: RestapiService, private router: Router ) {\n       this.job = this.api.getJob();\n      this.jobModel.jobId = this.job.jobId;\n      this.jobModel.jobName =  this.job.jobName;\n      this.jobModel.jobDescription = this.job.jobDescription;\n   }\n\n  ngOnInit() {\n     // this.getJobById();\n  }\n\n  /*\n  public getJobById() {\n      alert('aaaa');\n      alert(this.job.job_name);\n    alert(this.job.job_description);\n\n    */\n\n    updateJob() {\nthis.api.updateJob(this.jobModel).subscribe(\nres => {\n    this.status = true;\nthis.jobModel.jobName = res.jobName ;\nthis.jobModel.jobDescription = res.jobDescription;\nthis.api.setMainMessage('Job Updated');\nthis.api.setSubMessage('Your Job Information has been Successfully Updated.');\nthis.router.navigateByUrl('request-message');\n},\nerr => {\nalert('Can\\'t find job');\nthis.api.setMainMessage('Job Updation failed');\nthis.api.setSubMessage('Failed to update job record');\nthis.router.navigateByUrl('request-message');\n\n}\n\n);\n\n  }\n\n\n}\n","module.exports = \"\"","module.exports = \"<h4 style=\\\"text-align: center;color: red\\\" *ngIf=\\\"status\\\">{{message}}</h4>\\n<form  #f=\\\"ngForm\\\"  (ngSubmit)=\\\"adddWorking()\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleInputEmail1\\\">No. Of Hours Work</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\"  name=\\\"hours\\\" [(ngModel)]=\\\"jobrecord.hourSpent\\\" required=\\\"required\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Job Hour(number)\\\">\\n  </div>\\n    \\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"exampleFormControlTextarea1\\\">Date</label>\\n    <input class=\\\"form-control\\\" name=\\\"date\\\"  [(ngModel)]=\\\"jobrecord.date\\\" required=\\\"required\\\" type=\\\"date\\\">\\n    <label for=\\\"sel1\\\">Select list (select one):</label>\\n      <select class=\\\"form-control\\\" [(ngModel)]=\\\"jobrecord.jobStatus\\\" name=\\\"job_status\\\" id=\\\"sel1\\\">\\n        <option value=\\\"pending\\\">Pending</option>\\n         <option value=\\\"complete\\\">Complete</option>\\n       \\n      </select>\\n    \\n  </div>\\n\\n\\n  <button  type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { JobModel } from '../addjob/model/jobmodel';\nimport { WorkingModel } from '../addjob/model/workingmodel';\nimport { RestapiService } from '../shared/restapi.service';\nimport { JobRecord } from '../addjob/model/jobrecord';\n\n@Component({\n  selector: 'app-workingjob',\n  templateUrl: './workingjob.component.html',\n  styleUrls: ['./workingjob.component.css']\n})\nexport class WorkingjobComponent implements OnInit {\n\n\n    status = false;\n    message = '';\n    job: JobModel;\n    workingJob: WorkingModel = {\n        workId: 0,\n        employeeWorking: null,\n        date: '',\n        hourSpent: ''\n    };\n\n    jobrecord: JobRecord = {\n        date: '',\n        hourSpent: 0,\n        assignId: 0,\n        workId: 0,\n        jobStatus : 'pending'\n    };\n  constructor(private api: RestapiService) {\n    //  this.workingJob.employeeWorking = this.api.getWorkingJob();\n    this.jobrecord.assignId = this.api.getAssignId();\n   }\n\n\n  adddWorking() {\n\n    this.api.addWorkingHour2(this.jobrecord).subscribe(\n        res => {\n            this.jobrecord = res;\n            this.status = true;\n            this.message = 'Record Added Successfully';\n\n        },\n        err => {\n\n            alert('can add working detail....plz try again');\n        }\n    );\n  }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}